[{"title":"hexo 是如何快速搭建私人静态博客的","path":"2022/04/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new &quot;My New Post&quot; More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment"},{"title":"只需要一个函数就可以完成页面所有的请求？","path":"2022/04/20/requestAll-md/","text":"介绍 当你还在为交互函数在项目的各种地方不好维护而烦恼的时候，有没有想过只用一个函数就可以实现对本页面所有请求的执行或绑定。 本项目就旨在实现只写些配置就可以实现所有的交互。 Quick Start 1.下载代码 $ git clone https:&#x2F;&#x2F;gitee.com&#x2F;pw-1&#x2F;request-all.git 2.引入文件 import request from 'request.js' 3.在组件中使用 &lt;script&gt; import request from &#39;request.js&#39; &#x2F;&#x2F;配置请求的默认配置 request.MyHeaders.prototype[&#39;Content-Type&#39;] &#x3D; &#39;Application&#x2F;json&#39; &#x2F;&#x2F;设置默认content-type request.MyHeaders.prototype[&#39;token&#39;] &#x3D; &quot;123123dsasdasdasd&quot; &#x2F;&#x2F;设置默认token request.AjaxOpt.prototype.baseUrl &#x3D; &quot;http:&#x2F;&#x2F;localhost:3000&#x2F;&quot; &#x2F;&#x2F;设置默认基础路径 export default &#123; name:&quot;xxx&quot;, method:&#123; requestAll:request.requestAll, &#125;, data:&#123; requests:[ &#123; url:&#39;a&#39;,&#x2F;&#x2F;测试接口a，并打印请求结果 &#125;, &#123; url:&#39;b&#39;, targetData:&#39;now&#39;,&#x2F;&#x2F;请求接口a并吧res中的now放到 data里的now &#125;, &#123; url:&#39;c&#39;, delay:true, targetData:&#39;ok&#39;,&#x2F;&#x2F;将该请求封装成func绑定到此对象上 &#x2F;&#x2F;调用func this.requests[2].func() &#x2F;&#x2F;将会使this.ok &#x3D; res.ok &#125; ], now:&#39;&#39;, ok:&#39;&#39;, &#125;, mounted()&#123; this.requestAll(this.requests,this);&#x2F;&#x2F;第一个参数是请求配置列表，第二个参数是当前vue组件实力对像 &#125; &#125; &lt;&#x2F;script&gt; 至此你不需要写更多的交互逻 4.requests 请求配置列表 详解 &#123; url:'',//必选 接口的路径 method:'',//可选，默认get data:&#123;&#125;, //可选，发送的数据 headers:&#123;&#125;, //单独设置header, targetData:'', //存放请求结果到的目标数据 vm 的 data 里的属性名 delay:true, //是否延迟执行这个请求，设置之后在此对象绑定发送该请求的函数 successHandler:(res)=>&#123;&#125;,//成功请求后调用的函数，默认打印请求结果 failHandler:(err)=>&#123;&#125;,// 失败后调用的函数，末日打印 err &#125;"}]